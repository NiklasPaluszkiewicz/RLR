% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QPredictions.R
\name{Extend.Memory.QPredictions}
\alias{Extend.Memory.QPredictions}
\title{Extend Memory by specified experiences}
\usage{
Extend.Memory.QPredictions(algo.var, algo.par = NULL, game.object,
  memory.type, memory.param = NULL)
}
\arguments{
\item{algo.var}{A variable algorithm object, where to be modified variables are saved. Given by \code{Initialise.QPredictions()}}

\item{game.object}{A game object as defined by \code{Get.Game.Object.<Name>}.}

\item{memory.param}{Parameters necessary for the chosen \code{memory.type}.}

\item{memory.init}{Which type of extension should take place? The following types are supported \itemize{
\item \strong{self.play} The other strategies play against themselves - to understand possible secret handshakes. If I am myself part of the other strategies, the "self" strategy is ignored. The following \code{memory.param} are expected: \itemize{
\item \strong{no} How often should the other strategies play against themselves?
}
\item \strong{solid.foundation} Not only self.play, but also a random initialisation with increasing defect probabilities.The following \code{memory.param} are expected: \itemize{
\item \strong{self.no} How often should the other strategies play against themselves?
\item \strong{rep.no} How often should a random strategy be played? The defection probability is linearly increased.
}
}
If combinations of different memories are needed, one can use the function multiple times.}
}
\description{
Returns modified algo.var, where memory has been extended as specified.
}
